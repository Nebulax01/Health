generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.0.x"]
}
generator studio-client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int            @id @default(autoincrement())
  name            String
  lastname        String
  email           String         @unique
  phone_number    String
  password        String
  image           String?        @unique
  refresh_token   String?        @unique
  access_token    String?        @unique
patient_profile  PatientProfile? // One-to-one relationship between User and PatientProfile
  
  doctor          Doctor?
}

model MedicalStaffId {
  id       Int     @id
  used_by  String  @unique
  refresh_token   String?        @unique
  access_token    String?        @unique
  medical_staff MedicalStaff?
  
}

model DoctorId {
  id       Int     @id
  used_by  String  @unique
  doctor   Doctor?
}

model MedicalStaff {
  medical_staff_id Int            @id
  refresh_token   String?        @unique
  access_token    String?        @unique
  
  medical_staff_id_fk MedicalStaffId @relation(fields: [medical_staff_id], references: [id])
}

model Doctor {
  doctor_id Int     @id
  user_id   Int     @unique 
  specialty String  
  user      User    @relation(fields: [user_id], references: [id])

  doctor_id_fk DoctorId @relation(fields: [doctor_id], references: [id])
}

model PatientProfile {
  id              Int            @id @default(autoincrement())
  name            String
  lastname        String
  birthdate       DateTime
  gender          String
  phone_number    String
  email           String
  address         String
  emergency_contact String
  blood_type      String
  weight          Float
  height          Float
  photo           String?
  diseases        Disease[]
  allergies       Allergy[]
  vaccinations    Vaccination[]
  medications     Medication[]
  
  user_id         Int            @unique
  user            User           @relation(fields: [user_id], references: [id]) // One-to-one relationship between User and PatientProfile
}

model Disease {
  id           Int            @id @default(autoincrement())
  name         String
  patient_id   Int
  patient      PatientProfile @relation(fields: [patient_id], references: [id])
}

model Allergy {
  id           Int            @id @default(autoincrement())
  name         String
  patient_id   Int
  patient      PatientProfile @relation(fields: [patient_id], references: [id])
}

model Vaccination {
  id           Int            @id @default(autoincrement())
  name         String
  date         DateTime
  patient_id   Int
  patient      PatientProfile @relation(fields: [patient_id], references: [id])
}

model Medication {
  id           Int            @id @default(autoincrement())
  name         String
  date         DateTime
  disease      String
  patient_id   Int
  patient      PatientProfile @relation(fields: [patient_id], references: [id])
}